select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 2) +
geom_treemap_text(colour = "black",
place = "top",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
selectInput("player", "Player Name", choices = player_names18)
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- reactive(loc_18_zone %>% filter(player_name == input$player))
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "top",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
selectInput("player", "Player Name", choices = player_names18)
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- reactive(loc_18_zone %>% filter(player_name == input$player))
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
selectInput("player", "Player Name", choices = player_names18),
actionButton("simulate", "Simulate!")
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- reactive(loc_18_zone %>% filter(player_name == input$player))
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
selectInput("player", "Player Name", choices = player_names18),
actionButton("submit", "Submit!")
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- reactive({input$submit
loc_18_zone %>% filter(player_name == input$player)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
selectInput("player", "Player Name", choices = player_names18),
actionButton("submit", "Submit!")
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- reactive({
input$submit
loc_18_zone %>% filter(player_name == input$player)
})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
selectInput("player", "Player Name", choices = player_names18),
actionButton("submit", "Submit!")
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_18_zone %>% filter(player_name == input$player)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(4,
selectInput("player", "Player Name", choices = player_names18)),
column(4,
actionButton("submit", "Submit!"))
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_18_zone %>% filter(player_name == input$player)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(4,
selectInput("player", "Player Name", choices = player_names18)),
column(1,
actionButton("submit", "Submit!"))
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_18_zone %>% filter(player_name == input$player)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names18))
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_18_zone %>% filter(player_name == input$player)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
loc_full <- loc_full %>%
rename(game_id = `Game ID`,
game_event_id = `Game Event ID`,
player_id = `Player ID`,
player_name = `Player Name`,
team_id = `Team ID`,
team_name = `Team Name`,
quarter = `Period`,
min_rem = `Minutes Remaining`,
sec_rem = `Seconds Remaining`,
action_type = `Action Type`,
shot_type = `Shot Type`,
shot_zone_basic = `Shot Zone Basic`,
shot_zone_area = `Shot Zone Area`,
shot_zone_range = `Shot Zone Range`,
shot_dist_ft = `Shot Distance`,
x_loc = `X Location`,
y_loc = `Y Location`,
shot_made_flag = `Shot Made Flag`,
game_date = `Game Date`,
home_team = `Home Team`,
away_team = `Away Team`,
season_type = `Season Type`)
loc_full <- loc_full %>%
rename(game_id = `Game ID`,
game_event_id = `Game Event ID`,
player_id = `Player ID`,
player_name = `Player Name`,
team_id = `Team ID`,
team_name = `Team Name`,
quarter = `Period`,
min_rem = `Minutes Remaining`,
sec_rem = `Seconds Remaining`,
action_type = `Action Type`,
shot_type = `Shot Type`,
shot_zone_basic = `Shot Zone Basic`,
shot_zone_area = `Shot Zone Area`,
shot_zone_range = `Shot Zone Range`,
shot_dist_ft = `Shot Distance`,
x_loc = `X Location`,
y_loc = `Y Location`,
shot_made_flag = `Shot Made Flag`,
game_date = `Game Date`,
home_team = `Home Team`,
away_team = `Away Team`,
season_type = `Season Type`)
loc_full
loc_full <- loc_full %>%
mutate(game_id = as.factor(game_id),
game_event_id = as.factor(game_event_id),
player_id = as.factor(player_id),
player_name = as.factor(player_name),
team_id = as.factor(team_id),
action_type = as.factor(action_type),
shot_type = as.factor(shot_type),
shot_zone_basic = as.factor(shot_zone_basic),
shot_zone_area = as.factor(shot_zone_area),
shot_zone_range = as.factor(shot_zone_range),
shot_dist_ft = as.factor(shot_dist_ft),
shot_made_flag = as.factor(shot_made_flag),
game_date = as.Date(as.character(game_date), "%Y%m%d"),
home_team = as.factor(home_team),
away_team = as.factor(away_team),
season_type = as.factor(season_type)
)
loc_full_players <- loc_full %>%
distinct(player_id, player_name)
loc_full %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag) %>%
summarise(ct = n()) %>%
mutate(shoot_pct = (ct/ sum(ct)*100),
total_shots = ct/(shoot_pct/100)) %>%
filter(shot_made_flag == 1) %>%
select(-shot_made_flag, -ct) %>%
ungroup()
loc_full_zone <- loc_full %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag) %>%
summarise(ct = n()) %>%
mutate(shoot_pct = (ct/ sum(ct)*100),
total_shots = ct/(shoot_pct/100)) %>%
filter(shot_made_flag == 1) %>%
select(-shot_made_flag, -ct) %>%
ungroup()
loc_full_zone <- loc_full_zone %>%
left_join(loc_full_players)
View(loc_full_zone)
loc_full %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag, year, season_type) %>%
summarise(ct = n()) %>%
mutate(shoot_pct = (ct/ sum(ct)*100),
total_shots = ct/(shoot_pct/100)) %>%
filter(shot_made_flag == 1) %>%
select(-shot_made_flag, -ct) %>%
ungroup()
View(loc_full)
loc_full %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag, year, season_type) %>%
summarise(ct = n()) %>%
mutate(shoot_pct = (ct/ sum(ct)*100),
total_shots = ct/(shoot_pct/100)) %>%
filter(shot_made_flag == 1) %>%
select(-shot_made_flag, -ct) %>%
ungroup()
loc_full %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag, season_type) %>%
summarise(ct = n()) %>%
mutate(shoot_pct = (ct/ sum(ct)*100),
total_shots = ct/(shoot_pct/100)) %>%
filter(shot_made_flag == 1) %>%
select(-shot_made_flag, -ct) %>%
ungroup()
loc_full %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag, season_type) %>%
summarise(ct = n()) %>%
mutate(shoot_pct = (ct/ sum(ct)*100),
total_shots = ct/(shoot_pct/100)) %>%
filter(shot_made_flag == 1) %>%
select(-shot_made_flag, -ct) %>%
ungroup()
loc_full
