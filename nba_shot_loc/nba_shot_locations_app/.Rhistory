season_type = as.factor(season_type)
)
# getting player names forjust regular season records
loc_reg_szn_players <- loc_full %>%
filter(season_type == "Regular Season") %>%
distinct(player_id, player_name)
# create new table of just reg season records
loc_reg_szn <- loc_full %>%
filter(season_type == "Regular Season")
# summarise
loc_reg_szn <- loc_reg_szn %>%
mutate(szn = substr(game_id, 4, 5)) %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag, szn) %>%
summarise(ct = n()) %>%
ungroup() %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, szn) %>%
mutate(total = sum(ct),
shoot_pct = round((ct/total)*100, 2)) %>%
filter(shot_made_flag != 0) %>%
arrange(desc(szn, shot_zone_basic, shoot_pct))
loc_reg_szn <- loc_reg_szn %>%
left_join(loc_reg_szn_players)
loc_reg_szn %>%
filter(szn %in% c('18', '17', '16', '15', '14'))
loc_reg_szn <- loc_reg_szn %>%
filter(szn %in% c('18', '17', '16', '15', '14'))
# shiny app
player_names <- loc_reg_szn %>%
select(player_name) %>%
distinct(player_name) %>%
pull(player_name)
season_names <- loc_reg_szn %>%
select(szn) %>%
distinct(szn) %>%
pull(szn)
# app
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total_shots),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total_shots) %>%
mutate(shoot_pct = round(shoot_pct, 2)) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total_shots, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("player_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
)
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total) %>%
rename(Zone = shot_zone_basic, Direction = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
loc_reg_szn %>%
select(shot_type, total)
loc_reg_szn %>%
filter(player_name == "Stephen Curry")
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
select(shot_type, total)
# summarise
loc_reg_szn <- loc_reg_szn %>%
mutate(szn = substr(game_id, 4, 5)) %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag, szn) %>%
summarise(ct = n()) %>%
ungroup() %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, szn) %>%
mutate(total = sum(ct),
shoot_pct = round((ct/total)*100, 2)) %>%
filter(shot_made_flag != 0) %>%
ungroup() %>%
arrange(desc(szn, shot_zone_basic, shoot_pct))
loc_reg_szn <- loc_reg_szn %>%
left_join(loc_reg_szn_players)
# create new table of just reg season records
loc_reg_szn <- loc_full %>%
filter(season_type == "Regular Season")
# summarise
loc_reg_szn <- loc_reg_szn %>%
mutate(szn = substr(game_id, 4, 5)) %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, shot_made_flag, szn) %>%
summarise(ct = n()) %>%
ungroup() %>%
group_by(player_id, shot_zone_basic, shot_zone_area, shot_type, szn) %>%
mutate(total = sum(ct),
shoot_pct = round((ct/total)*100, 2)) %>%
filter(shot_made_flag != 0) %>%
ungroup() %>%
arrange(desc(szn, shot_zone_basic, shoot_pct))
loc_reg_szn <- loc_reg_szn %>%
left_join(loc_reg_szn_players)
loc_reg_szn <- loc_reg_szn %>%
filter(szn %in% c('18', '17', '16', '15', '14'))
player_names <- loc_reg_szn %>%
select(player_name) %>%
distinct(player_name) %>%
pull(player_name)
season_names <- loc_reg_szn %>%
select(szn) %>%
distinct(szn) %>%
pull(szn)
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
select(shot_type, total)
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
select(shot_type, total) %>%
group_by(shot_type) %>%
mutate(sum(total))
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
group_by(shot_type) %>%
mutate(sum(total))
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
group_by(shot_type) %>%
mutate(tot = sum(total))
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
select(shot_type, total)
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
select(shot_type, total) %>%
group_by(shot_type)
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
select(shot_type, total) %>%
group_by(shot_type) %>%
mutate(tot = sum(total))
loc_reg_szn %>%
filter(player_name == "Stephen Curry") %>%
select(shot_type, total) %>%
group_by(shot_type) %>%
summarise(tot = sum(total))
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("two_three_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
),
fluidRow(
reactableOutput("player_table")
),
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$two_three_table <- renderReactable(
reactable(selected() %>%
select(shot_type, total) %>%
group_by(shot_type) %>%
summarise(`Total Shots` = sum(total)),
defaultSorted = list(`Total Shots` = "desc")
),
)
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total) %>%
rename(`Zone` = shot_zone_basic, `Direction` = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("two_three_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
),
fluidRow(
reactableOutput("player_table")
),
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$two_three_table <- renderReactable(
reactable(selected() %>%
select(shot_type, total) %>%
group_by(shot_type) %>%
rename(`FG Type` = shot_type) %>%
summarise(`Total Shots` = sum(total)),
defaultSorted = list(`Total Shots` = "desc")
),
)
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total) %>%
rename(`Zone` = shot_zone_basic, `Direction` = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("two_three_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
),
fluidRow(
reactableOutput("player_table")
),
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$two_three_table <- renderReactable(
reactable(selected() %>%
select(shot_type, total) %>%
group_by(shot_type) %>%
rename(`FG Type` = shot_type) %>%
summarise(`Total Shots` = sum(total)),
defaultSorted = list(`Total Shots` = "desc")
),
)
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total) %>%
rename(`Zone` = shot_zone_basic, `Direction` = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(1,
actionButton("submit", "Submit!")),
column(4,
selectInput("player", "Player Name", choices = player_names)),
column(4,
selectInput("season", "Season", choices = season_names))
),
fluidRow(
reactableOutput("two_three_table")
),
fluidRow(
plotOutput("player_tree", width = "100%", height = "600px")
),
fluidRow(
reactableOutput("player_table")
),
)
server <- function(input, output, session) {
selected <- eventReactive(input$submit, {loc_reg_szn %>% filter(player_name == input$player & szn == input$season)})
output$two_three_table <- renderReactable(
reactable(selected() %>%
select(shot_type, total) %>%
group_by(shot_type) %>%
rename(`FG Type` = shot_type) %>%
summarise(`Total Shots` = sum(total)),
defaultSorted = list(`Total Shots` = "desc")
),
)
output$player_table <- renderReactable(
reactable(selected() %>%
select(shot_zone_basic, shot_zone_area, shoot_pct, total) %>%
rename(`Zone` = shot_zone_basic, `Direction` = shot_zone_area, `Shooting %` = shoot_pct, `Total Shots` = total),
defaultPageSize = 5,
defaultSorted = list(`Total Shots` = "desc")
)
)
output$player_tree <- renderPlot({
selected() %>%
ggplot(aes(area = total, fill = shoot_pct, label = shot_zone_area, subgroup = shot_zone_basic)) +
geom_treemap() +
geom_treemap_subgroup_text(place = "bottom", grow = TRUE,
colour = "black",
fontface = "italic", family = "mono") +
geom_treemap_subgroup_border(colour = "black", size = 3) +
geom_treemap_text(colour = "black",
place = "center",
size = 15) +
scale_fill_gradient2(name = "Shooting %", limits = c(0, 100), breaks = c(20, 30, 40, 50, 60, 70), low = "steelblue4", mid = "snow2", high = "tomato4", midpoint = 45) +
facet_grid(~ shot_type) +
ggtitle("Shot Position Distribution & Shooting %")
})
}
shinyApp(ui, server)
setwd("~/Documents/Data/GitHub/working/nba_shot_loc/nba_shot_locations")
shiny::runApp()
